ADMIN_MEDIA_PREFIX = '{{admin_media_prefix}}'
DATABASE_ENGINE = 'postgresql_psycopg2'
DATABASE_NAME = os.environ['CONFIG_PG_DBNAME']
DATABASE_USER = os.environ['CONFIG_PG_USER']
DATABASE_PASSWORD = os.environ['CONFIG_PG_PASSWORD']
DATABASE_HOST = os.environ['CONFIG_PG_HOST']
DATABASE_PORT = ''

DATABASES = {
    'default': {
    {% if database_type == 'postgresql-gis' %}
        'ENGINE': 'django.contrib.gis.db.backends.postgis' if os.environ['CONFIG_PG_DBNAME'] else 'django.db.backends.postgresql_psycopg2',{# we use vanilla postgres instead of postgis when no CONFIG_PG_DBNAME env var is set because that setting indicates we don't have a DB accessible right now. It seems this freaks out the PostGIS backend -- it seems to try and connect even if there isn't anything databasey to do. Maybe it is just checking that the DB actually has PostGIS set up. In any case, if we leave this at postgis then running collectstatic during the build doesn't work. #}
    {% else %}
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
    {% endif %}
        'NAME': os.environ['CONFIG_PG_DBNAME'],
        'USER': os.environ['CONFIG_PG_USER'],
        'PASSWORD': os.environ['CONFIG_PG_PASSWORD'],
        'HOST': os.environ['CONFIG_PG_HOST'],
        'PORT': '',
    }
}

{# For PostGIS: #}
GEOS_LIBRARY_PATH = '/usr/lib/libgeos_c.so.1'
GDAL_LIBRARY_PATH = '/usr/lib/libgdal1.6.0.so.1'
